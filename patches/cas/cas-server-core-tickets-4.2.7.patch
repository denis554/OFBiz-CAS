diff --git a/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/AbstractTicket.java b/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/AbstractTicket.java
index b1e7d9c..f1d82f5 100644
--- a/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/AbstractTicket.java
+++ b/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/AbstractTicket.java
@@ -164,4 +164,27 @@
     public int compareTo(final Ticket o) {
         return getId().compareTo(o.getId());
     }
+
+    /**
+     * Extended for OFBiz-CAS.
+     */
+    public AbstractTicket(final String id, final TicketGrantingTicket ticket,
+            final ExpirationPolicy expirationPolicy, final Long creationTime, final Long lastTimeUsed) {
+        Assert.notNull(expirationPolicy, "expirationPolicy cannot be null");
+        Assert.notNull(id, "id cannot be null");
+
+        this.id = id;
+        if (creationTime == null) {
+            this.creationTime = System.currentTimeMillis();
+        } else {
+            this.creationTime = creationTime;
+        }
+        if (lastTimeUsed == null) {
+            this.lastTimeUsed = System.currentTimeMillis();
+        } else {
+            this.lastTimeUsed = lastTimeUsed;
+        }
+        this.expirationPolicy = expirationPolicy;
+        this.ticketGrantingTicket = ticket;
+    }
 }
diff --git a/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/ProxyGrantingTicketImpl.java b/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/ProxyGrantingTicketImpl.java
index 80e7704..89c5ce3 100644
--- a/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/ProxyGrantingTicketImpl.java
+++ b/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/ProxyGrantingTicketImpl.java
@@ -69,4 +69,12 @@
         return serviceTicket;
     }
 
+    /**
+     * Extended for OFBiz-CAS.
+     */
+    public ProxyGrantingTicketImpl(final String id, final Service proxiedBy, final TicketGrantingTicket ticketGrantingTicket,
+            final Authentication authentication, final ExpirationPolicy policy,
+            final Boolean expired, final Long creationTime, final Long lastTimeUsed) {
+        super(id, proxiedBy, ticketGrantingTicket, authentication, policy, expired, creationTime, lastTimeUsed);
+    }
 }
diff --git a/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/ServiceTicketImpl.java b/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/ServiceTicketImpl.java
index 51e31a8..63bb786 100644
--- a/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/ServiceTicketImpl.java
+++ b/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/ServiceTicketImpl.java
@@ -145,4 +145,18 @@
         return null;
     }
 
+    /**
+     * Extended for OFBiz-CAS.
+     */
+    public ServiceTicketImpl(final String id,
+            @NotNull final TicketGrantingTicketImpl ticket, @NotNull final Service service,
+            final boolean fromNewLogin, final ExpirationPolicy policy,
+            final Long creationTime, final Long lastTimeUsed) {
+        super(id, ticket, policy, creationTime, lastTimeUsed);
+
+        Assert.notNull(service, "service cannot be null");
+        Assert.notNull(ticket, "ticket cannot be null");
+        this.service = service;
+        this.fromNewLogin = fromNewLogin;
+    }
 }
diff --git a/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/TicketGrantingTicketImpl.java b/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/TicketGrantingTicketImpl.java
index 6f5fec4..539b27c 100644
--- a/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/TicketGrantingTicketImpl.java
+++ b/cas-server-core-tickets/src/main/java/org/jasig/cas/ticket/TicketGrantingTicketImpl.java
@@ -302,4 +302,24 @@
                 .append(ticket.getId(), this.getId())
                 .isEquals();
     }
+
+    /**
+     * Extended for OFBiz-CAS.
+     */
+    public TicketGrantingTicketImpl(final String id,
+            final Service proxiedBy,
+            final TicketGrantingTicket parentTicketGrantingTicket,
+            @NotNull final Authentication authentication, final ExpirationPolicy policy,
+            final Boolean expired, final Long creationTime, final Long lastTimeUsed) {
+
+        super(id, parentTicketGrantingTicket, policy, creationTime, lastTimeUsed);
+
+        if (parentTicketGrantingTicket != null && proxiedBy == null) {
+            throw new IllegalArgumentException("Must specify proxiedBy when providing parent TGT");
+        }
+        Assert.notNull(authentication, "authentication cannot be null");
+        this.authentication = authentication;
+        this.proxiedBy = proxiedBy;
+        this.expired = expired;
+    }
 }
